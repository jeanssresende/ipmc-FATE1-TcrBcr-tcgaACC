# 1) Ler o arquivo (genes x amostras) ---------------------------------------
url <- "https://gdc-hub.s3.us-east-1.amazonaws.com/download/TCGA-ACC.star_tpm.tsv.gz"
mat_dt <- fread(url)   # 1ª coluna = Ensembl gene ID (com ou sem versão)
# Pacotes
library(data.table)
library(tidyverse)
# 1) Ler o arquivo (genes x amostras) ---------------------------------------
url <- "https://gdc-hub.s3.us-east-1.amazonaws.com/download/TCGA-ACC.star_tpm.tsv.gz"
mat_dt <- fread(url)   # 1ª coluna = Ensembl gene ID (com ou sem versão)
install.packages('R.utils')
mat_dt <- fread(url)   # 1ª coluna = Ensembl gene ID (com ou sem versão)
# Detecta a coluna de IDs de gene
gene_col <- names(mat_dt)[1]
ens <- mat_dt[[gene_col]]
# Remove a coluna de IDs e vira matriz numérica
mat <- as.matrix(mat_dt[, -1, with = FALSE])
mode(mat) <- "numeric"
rownames(mat) <- ens
# 2) (Opcional) remover versão dos IDs Ensembl (ENSG00000... .xx) ----------
ens_nov <- sub("\\.\\d+$", "", rownames(mat))
rownames(mat) <- ens_nov
# 4) Extrair FATE1 (por Ensembl) -------------------------------------------
# Ensembl de FATE1 (GRCh38): ENSG00000147378
stopifnot("ENSG00000147378" %in% rownames(mat))
fate1 <- mat["ENSG00000147378", ]                # já está em log2(TPM+1)
# 5) Padronizar barcodes e filtrar tumor primário (01) ----------------------
# As colunas aqui já parecem no nível 'sample' (ex.: TCGA-OR-A5K2-01A).
sample_barcode <- colnames(mat)
get_sample_type <- function(bc) substr(bc, 14, 15)   # posições 14-15 (ex.: "01")
sample_type <- get_sample_type(sample_barcode)
fate1_tbl <- tibble(
sample_id = sample_barcode,              # use assim mesmo (TCGA-XX-XXXX-01A)
sample_type = sample_type,
FATE1_log2TPM = as.numeric(fate1)
) %>%
filter(sample_type == "01") %>%
select(sample_id, FATE1_log2TPM)
# Build steroid_phenotype from mRNA_K4 (case-insensitive)
df <- dados_filt %>%
mutate(
steroid_phenotype = case_when(
str_detect(tolower(mRNA_K4), "high") ~ "HSP",
str_detect(tolower(mRNA_K4), "low")  ~ "LSP",
TRUE ~ NA_character_
)
) %>%
select(sample_id, FATE1_log2TPM, steroid_phenotype) %>%
filter(!is.na(FATE1_log2TPM), !is.na(steroid_phenotype)) %>%
mutate(steroid_phenotype = factor(steroid_phenotype, levels = c("LSP","HSP")))
